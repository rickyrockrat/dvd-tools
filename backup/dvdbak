#!/bin/bash
# dvdbak -  Save/restore DVDs
#
# Copyright 2011-2013 Rickyrockrat <gpib at rickyrockrat dot net>
#	 This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
RL=$(readlink $0)
if [ -n "$RL" ]; then
  RUN_DIR=$(dirname $RL)
else
  RUN_DIR=$(dirname $0)
fi
#echo "$RUN_DIR"
. "$RUN_DIR/dvdbak.common"
#image_info "$1"
#author_dvd "$1"
#make_dvd_iso "$1"

#************************************************************************
#************************************************************************
usage_b () {
	echo " Extended help for -b <type>"
	echo " Set the type of backup:"
  echo "       mirror (mirror whole DVD)"
  echo "       main (dvdbackup auto figure main feature)"
  echo "       mtitle (extract specified title number using mplayer)"
  echo "       dvdrip Use dvdrip to extract the title number"
  echo "       drtools Use dvdrip tools to extract title number"
  echo "       title (extract specified title number using dvdbackup)"
  echo "       vlc (use vlc to copy title)"
  echo "       vlcmain (use vlc, auto figure out main title)"
  echo "       byte (bit-for-bit copy)). "
  echo "       defaults to mirror."
}
#************************************************************************
#************************************************************************
usage_ex () {
	echo "Examples:"
  echo " Get information on a device or image"
  echo "  dvd -i"
  echo "  dvd -i -d /path/to/file.iso"
  echo " Backup bits and pieces, or all of the movie" 
  echo "  dvd -f back -b mirror"
  echo "  dvd -f back -b byte "
  echo "  dvd -f back -b main"
  echo "  dvd -f back -b vlcmain"
  echo "  dvd -f back -b title -t 3"
  echo "  dvd -f back -b vlc -t 30"
  echo " Author a DVD directory. Will copy existing files while examining them"
  echo "  dvd -f auth -m MOVIE (input=$de_dir, output=$dvd_out"
  echo "  dvd -f auth -m MOVIE -o out_dir -n in_dir"
  echo "  dvd -f auth -m MOVIE -o out_dir -n in_dir -e \"file1 file2 file\ with\ spaces\"" 
  echo " Create ISO image. Must use Auth or have a mirrored DVD backup"
  echo "  dvd -f dvd -m MOVIE"
}
#************************************************************************
# 
#************************************************************************
usage () {
  echo "  dvdbak Copyright 2011-2013 Rickyrockrat <gpib at rickyrockrat dot net>"
  echo "  This program comes with ABSOLUTELY NO WARRANTY; "
  echo "  This is free software, and you are welcome to redistribute it"
  echo "  under the GPL, Version 3. Please see the file COPYING."
  echo " "
  echo "Version 1.0"
  echo " "
  echo "Usage: dvdbak <options>"
  echo "  Either the -i or -f must be specified."
  echo ""
  echo "  options:"
  echo "    -b type. Set the type of backup:"
  echo "    -d device. Set the dvd device. Defaults to '$image'. Can also be an iso image."
  echo "    -e file1 file2 file2. Use this list to add files to DVD auth, instead of autolist"
  echo "    -f function. Set the mode of dvd."
  echo "        function is back, auth, or dvd"
  echo "          cd=find/erase/burn DVD, back=backup, auth=author dvd=make DVD ISO image"
  echo "         use -h cd for help on the cd functions"
  echo "    -h u this screen -h b for help on -b, -h cd for extended help on cd, -h ex for examples, -h sys for system help. "
  echo "    -i info about device. Uses -d unless not specified, then uses $image."
  echo "       multiple -i increase verbosity. Use 2 to get handbrake to run - may take a long time."
  echo "    -l log_file. Set location of log file. Defaults to $log"
  echo "    -m movie_name. This is either an absolute input_directory, or relative to $de_dir."
  echo "       This should be the top-level movie directory, i.e. " 
  echo "       '$de_dir/MOVIE', or 'MOVIE'"
  echo "       This option is REQUIRED for auth or iso"
  echo "    -t number. Set title number (for back), volume name for dvd (-f dvd)"
  echo "    -n name. Set name for:"
  echo "       input for auth and dvd (-f dvd, -f auth), or output (back -t byte,vlc,vlcmain)."
  echo "    -o path. Set output path. Defaults are"
  echo "       main,mirror,title '$de_dir'"
  echo "       auth              '$dvd_out'"
  echo "       dvd               '$iso_out'"
  echo "       byte              '$iso_in'"
  echo "    -v mname list or cat the files in the $de_dir/mname/VIDEO_TS directory. "
  echo "       if -t is specified, it will concatenate the files into mname.VOB. "
  echo "       otherwise it will just list the files. Useful after a dvdbackup to make a single movie file."
  echo "    -x Don't eject DVD when done. (default is to eject)" 
  echo "       "
  exit 1
}
#************************************************************************
# show usage for -f cd
#************************************************************************
usage_cd () {
	echo "Options for -f cd"
	echo "  -e dev, erase device dev, which should be of the form 0,0,1"
	echo "  -b dev is burn (must set iso image with -n)"
	echo "  -s show devices, used to obtain the dev argument for the other options"
	echo "  -s set speed:"
	echo "     with -e should be either all or full."
	echo "     with -b should be a number 1 to ?"

}
#************************************************************************
# Set up out input parameters.
# input output
#************************************************************************
check_set_auth_dvd_params () {
	if [ -z "$MOVIE" ]; then
      echo "Must specify at least -m"
      exit 1
    fi
    if [ -z "$NAME" ]; then
	  M_IN="$1/$MOVIE"
    else
      M_IN="$NAME"
    fi
    if [ -z "$OUTN" ]; then
      M_OUT="$2"
      M_ISO="$2/$MOVIE.iso"
    else
      M_OUT="$OUTN"
      M_ISO="$OUTN/$MOVIE.iso"
    fi
}
#************************************************************************
# for testing only
#************************************************************************
dummy() {
	echo "testage"
}
#************************************************************************
# Begin script
#************************************************************************
if [ $# -lt 1 ]; then
	usage
fi
# default image...DVD device
DEV="$image"
set_paths "/bulk/media/movies"
# location of root for the _dir vars
ROOT="$root"
# location of decrypted movies, used by dvdbackup
DEDIR="$de_dir"
# location of encrypted movies - verbatium copy from DVD"
ISODIR="$iso_dir"
# location of unencrypted ISOs - output from mkisofs
OUTISO="iso_out"
# location of re-authored DVDs - output from dvdauthor
ADIR="$dvd_out"
LOG="$log"
TYPE="mirror"
let INFO=0
# movie name
MOVIE=""
# movie title, a number
TITLE=""
#list of files for dvd author
FLIST=""
# optional other name for title or volume name
NAME=""
EJECT=1
HELP=""
if [ $# -eq 1 ] && [ "$1" = "-h" ]; then
 usage
 exit 1
fi
while  getopts b:d:e:f:h:il:m:n:o:st:v:x opt ; do
  #echo "opt=$opt arg=$OPTARG"
  case $opt in
    b) TYPE="$OPTARG"; BOPT_SET=1;;
    d) DEV="$OPTARG" ;;
    e) FLIST="${OPTARG[@]}";;
    f) case $OPTARG in 
       dvd|auth) 
         EJECT=0 
         OP="$OPTARG";;
       back|cd) OP="$OPTARG";;
       #cd) TYPE=""; OP="$OPTARG";;
       *) echo "Invalid -f function. one of back,dvd,auth"
          exit 1
       esac
       ;;
    h) HELP="$OPTARG";;
    i) let INFO=INFO+1;;
    l) LOG="$OPTARG";;
    m) MOVIE="$OPTARG" ;;
    n) NAME="$OPTARG";;
    o) OUTN="$OPTARG";;
    t) TITLE="$OPTARG" ;;
    s) SHOW=1;;
    v) CATVOB="$OPTARG";;
    x) EJECT=0 ;;
    *) echo "Invalid option $OPTARG"
       exit 1
       ;;
  esac
done
if [ -n "$HELP" ]; then

  if [ "$HELP" = "cd" ]; then
    usage_cd
  elif [ "b" = "$HELP" ]; then
    usage_b
  elif [ "$HELP" = "ex" ]; then
     usage_ex
  elif [ "$HELP" = "u" ]; then 
     usage
  elif [ "$HELP" = "sys" ]; then
     display_sys_info
  else
     display_sys_info
     usage_cd
     usage_b
     usage_ex
     usage
  fi 
  exit 1
fi
check_space
if [ -z "$OUTN" ]; then
  set_paths "/bulk/media/movies"
else
  echo "setting output base path to '$OUTN'"
  set_paths "$OUTN"
fi
if [ $INFO -gt 0 ]; then
  if [ $INFO -lt 2 ]; then
    echo "use -i -i to invoke handbrake detailed listing"
  fi
  if [ $INFO -gt 3 ]; then
    display_sys_info
  fi
  image_info "$DEV" "$INFO"
  exit 0
fi
if [ -n "$CATVOB" ]; then
  catvob "$CATVOB" "$TITLE"
  exit 0
fi
# cd-burn, cd-erase, cd-find operation
if [ "$OP" = "cd" ]; then
  #echo "FLIST='$FLIST' TYPE='$TYPE'"
  if [ -n "$FLIST" ]; then #erase
   cd_erase "$FLIST" "$SHOW"
  elif [ "$TYPE" != "mirror" ]; then #burn
    if [ -z "$NAME" ]; then
      echo "Must specify ISO image"
      exit 1
    else
      if [ -e "$NAME" ]; then 
      _NAME="$NAME"
      elif [ -e "$root/$NAME" ]; then
       _NAME="$root/$NAME"
      elif [ -e "$iso_out/$NAME" ]; then
       _NAME="$iso_out/$NAME"
      else
        echo "Can't find $NAME in ., $root, or $iso_out"
        exit 1
      fi
      cd_burn "$TYPE" "$_NAME"
    fi
  else     
    cdrecord -scanbus
  fi
  exit 0
fi
# sanity checks
if [ "$OP" = "back" ]; then
  if [ "$TYPE" = "title" ] || [ "$TYPE" = "vlc" ] || [ "$TYPE" = "mtitle" ] || [ "$TYPE" = "dvdrip" ]; then
    if [ -z "$TITLE" ]; then
      echo "You must set title number (-t). Use the -i to tell you which title"
      exit 1
    fi
  fi
fi
case $OP in 
 back)
    case $TYPE in
      mirror) dvdbackup_mirror "$DEV" "$OUTN" ;;
      main) dvdbackup_main "$DEV" "$OUTN" ;;
      mtitle) mplayer_title "$DEV" "$TITLE" "$NAME" ;;
      dvdrip) dvdrip_title "$DEV" "$TITLE" "$NAME" ;;
      title) dvdbackup_title "$TITLE" "$DEV" "$OUTN" ;;
      drtools) drtools_title "$DEV" "$TITLE" "$NAME" ;;
      byte) backup_byte "$DEV" "$NAME" ;;
      vlc) vlc_copy "$DEV" "$TITLE" "$NAME" ;;
      vlcmain) vlc_copy_main "$DEV" "$NAME" ;;
      *) echo "Invalid -b option '$TYPE'"
         exit 1;;
    esac
    ;;
  auth) 
    check_set_auth_dvd_params "$de_dir" "$dvd_out"
    author_dvd "$M_IN" "$M_OUT" "$FLIST"
    ;;
  dvd)
   check_set_auth_dvd_params "$dvd_out" "$iso_out"
   make_dvd_iso "$M_IN" "$M_ISO"
    ;;
  *) echo " invalid function"
     exit 1
    ;;
esac
if [ "1" = "$EJECT" ]; then
  eject "$image"
fi
